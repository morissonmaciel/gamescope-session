#!/usr/bin/bash

declare -r CLIENT=$1
declare -r CLIENT_CONFIG_DIR_USR=/usr/share/gamescope-session-plus/sessions.d
declare -r CLIENT_CONFIG_DIR_ETC=/etc/gamescope-session-plus/sessions.d
declare -r CLIENT_CONFIG_DIR_LOCAL="${XDG_CONFIG_HOME:-$HOME/.config}/gamescope-session-plus/sessions.d"

BASE_DE_NAME="silverblue"

# Fix intel color corruption
export INTEL_DEBUG=norbc
# Enabling full multi threading support for games with Mesa
export mesa_glthread=true

# Plop GAMESCOPE_MODE_SAVE_FILE into $XDG_CONFIG_HOME (defaults to ~/.config).
export GAMESCOPE_MODE_SAVE_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/gamescope/modes.cfg"

# Make path to gamescope mode save file.
mkdir -p "$(dirname "$GAMESCOPE_MODE_SAVE_FILE")"
touch "$GAMESCOPE_MODE_SAVE_FILE"

# Mangohud config
export MANGOHUD_CONFIGFILE="${HOME}/.mangohud/MangoHud.conf"
mkdir -p "$(dirname "$MANGOHUD_CONFIGFILE")"
echo "no_display" > "$MANGOHUD_CONFIGFILE"

# Steam and Desktop session configuration
export HOMETEST_DESKTOP=1
export HOMETEST_USER=gamer
export HOMETEST_DESKTOP_USER=gamer
export HOMETEST_DESKTOP_SESSION=gnome

# Gamescope specific configuration
export GAMESCOPE_NV12_COLORSPACE=k_EStreamColorspace_BT601
export GAMESCOPE_DISABLE_ASYNC_FLIPS=1
export GAMESCOPE_LIMITER_FILE=$(mktemp /tmp/gamescope-limiter.XXXXXXXX)

# General configuration
export STEAM_DISPLAY_REFRESH_LIMITS=30,40,60,100,120
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0
export WINEDLLOVERRIDES=dxgi=n

# RayTracing/Vulkan configuration
export VKVD3D_CONFIG=dxr11,dxr
export VKVD3D_FEATURE_LEVEL=12_2
export vk_xwayland_wait_ready=false

# HDR configuration
export DXVK_HDR=1
export ENABLE_GAMESCOPE_WSI=1
#export PROTON_ENABLE_AMD_AGS=1

# Preparing gamescope session run arguments
RESOLUTION=""
VRR_ARGS=""
SDR_GAMUT=""
#"--sdr-gamut-wideness 1"

if [ -n "$SCREEN_WIDTH" ] && [ -n "$SCREEN_HEIGHT" ] ; then
	RESOLUTION="-W $SCREEN_WIDTH -H $SCREEN_HEIGHT"
fi

if [ -n "$SCREEN_REFRESH_RATE" ]; then
	VRR_ARGS="-r $SCREEN_REFRESH_RATE"
fi

# Setup socket for gamescope

# -- Create run directory file for startup and stats sockets
tmpdir="$([[ -n ${XDG_RUNTIME_DIR+x} ]] && mktemp -p "$XDG_RUNTIME_DIR" -d -t gamescope.XXXXXXX)"
socket="${tmpdir:+$tmpdir/startup.socket}"
stats="${tmpdir:+$tmpdir/stats.pipe}"

# -- Fail early if we don't have a proper runtime directory setup
if [[ -z $tmpdir || -z ${XDG_RUNTIME_DIR+x} ]]; then
	echo >&2 "!! Failed to find run directory in which to create stats session sockets (is \$XDG_RUNTIME_DIR set?)"
	exit 0
fi

export GAMESCOPE_STATS="$stats"
mkfifo -- "$stats"
mkfifo -- "$socket"

# Attempt to claim global session if we're the first one running (e.g. /run/1000/gamescope)
linkname="gamescope-stats"
#   shellcheck disable=SC2031 # (broken warning)
sessionlink="${XDG_RUNTIME_DIR:+$XDG_RUNTIME_DIR/}${linkname}" # Account for XDG_RUNTIME_DIR="" (notfragileatall)
lockfile="$sessionlink".lck
exec 9>"$lockfile" # Keep as an fd such that the lock lasts as long as the session if it is taken
if flock -n 9 && rm -f "$sessionlink" && ln -sf "$tmpdir" "$sessionlink"; then
	# Took the lock.  Don't blow up if those commands fail, though.
	echo >&2 "Claimed global gamescope stats session at \"$sessionlink\""
else
	echo >&2 "!! Failed to claim global gamescope stats session"
fi

# Make Qt apps use the styling and behaviour of the desktop session
# This fixes some missing icons and unreadable text with Qt desktop apps in gamescope
if [[ ${BASE_DE_NAME} == 'silverblue' ]]; then
  export QT_QPA_PLATFORM_THEME=gtk2
else
  export QT_QPA_PLATFORM_THEME=kde
fi


ulimit -n 524288

# Default Steam Gamemode UI Background.
# Applied here instead of gamescope-session-steam due to device-quirks overriding it.
# Ex: /usr/share/plymouth/themes/steamos/bazzite.png
export STEAM_UPDATEUI_PNG_BACKGROUND=""

# Source device quirks if exists
if [ -f /usr/share/gamescope-session-plus/device-quirks ]; then
  . /usr/share/gamescope-session-plus/device-quirks
fi

# Source client app specific configuration files
set -a
for i in ${CLIENT_CONFIG_DIR_USR}/${CLIENT} ${CLIENT_CONFIG_DIR_ETC}/${CLIENT} ${CLIENT_CONFIG_DIR_LOCAL}/${CLIENT} ;
do
    [[ -f "${i}" ]] && . "${i}"
done
set +a

# Source user configuration from ~/.config/environment.d
set -a
for i in "${HOME}"/.config/environment.d/*.conf ;
do
    [[ -f "${i}" ]] && . "${i}"
done
set +a

CURSOR=""
# Use specified cursor if file exists
if [ -f "$CURSOR_FILE" ] ; then
    CURSOR="--cursor ${CURSOR_FILE}"
fi

if [ -z "$GAMESCOPECMD" ] ; then
    RESOLUTION=""
    if [ -n "$SCREEN_WIDTH" ] && [ -n "$SCREEN_HEIGHT" ] ; then
        RESOLUTION="-W $SCREEN_WIDTH -H $SCREEN_HEIGHT"
    fi

    if [ -z $VULKAN_ADAPTER ]; then
        GAMESCOPECMD="/usr/bin/gamescope \
        $CURSOR \
        --max-scale 2 \
        --adaptive-sync \
        -e \
        $RESOLUTION \
        --xwayland-count 2 \
        -O *,eDP-1 \
        --default-touch-mode 4 \
        --hide-cursor-delay $CURSOR_DELAY \
        --fade-out-duration 200 \
        --cursor-scale-height 720 \
        -R $socket -T $stats"
     else
        GAMESCOPECMD="/usr/bin/gamescope \
        $CURSOR \
        --max-scale 2 \
        --adaptive-sync \
        -e \
        $RESOLUTION \
        --xwayland-count 2 \
        -O *,eDP-1 \
        --default-touch-mode 4 \
        --hide-cursor-delay $CURSOR_DELAY \
        --fade-out-duration 200 \
        --cursor-scale-height 720 \
        --prefer-vk-device $VULKAN_ADAPTER \
        -R $socket -T $stats"
     fi

else
    # Add socket and stats read
    if [ -z $VULKAN_ADAPTER ]; then
        GAMESCOPECMD+=" -R $socket -T $stats"
    else
        GAMESCOPECMD+=" --prefer-vk-device $VULKAN_ADAPTER -R $socket -T $stats"
    fi
fi

# Log rotate the last session
if [ -f "${HOME}"/.${CLIENT}-stdout.log ]; then
    cp "${HOME}"/.${CLIENT}-stdout.log "${HOME}"/.${CLIENT}-stdout.log.old
fi
if [ -f "${HOME}"/.gamescope-stdout.log ]; then
    cp "${HOME}"/.gamescope-stdout.log "${HOME}"/.gamescope-stdout.log.old
fi
if [ -f "${HOME}"/.gamescope-cmd.log ]; then
    cp "${HOME}"/.gamescope-cmd.log "${HOME}"/.gamescope-cmd.log.old
fi

# Start gamescope compositor, log it's output and background it
echo $GAMESCOPECMD > "${HOME}"/.gamescope-cmd.log
$GAMESCOPECMD > "${HOME}"/.gamescope-stdout.log 2>&1 &
gamescope_pid="$!"

if read -r -t 3 response_x_display response_wl_display <> "$socket"; then
	export DISPLAY="$response_x_display"
	export GAMESCOPE_WAYLAND_DISPLAY="$response_wl_display"
	# We're done!
else
	kill -9 "$gamescope_pid"
	wait
	exit 0
	# Systemd or Session manager will have to restart session
fi

# Input method support if present
if command -v /usr/bin/ibus-daemon > /dev/null; then
    /usr/bin/ibus-daemon -d -r --panel=disable --emoji-extension=disable
fi

# If we have mangoapp binary start it
if command -v mangoapp > /dev/null; then
	(while true; do
		mangoapp > "${HOME}"/.mangoapp-stdout.log 2>&1
	done) &
fi

# For compatibility with older user configuration overrides
if [ -n "$STEAMCMD" ] ; then
	CLIENTCMD=$STEAMCMD
fi

# Start client application
$CLIENTCMD > "${HOME}/.${CLIENT}-stdout.log" 2>&1

# When the client exits, kill gamescope nicely
kill $gamescope_pid

# Start a background sleep for five seconds because we don't trust it
sleep 5 &
sleep_pid="$!"

# Catch reboot and poweroof sentinels here
if [[ -e "$STEAMOS_STEAM_REBOOT_SENTINEL" ]]; then
	rm -f "$STEAMOS_STEAM_REBOOT_SENTINEL"
	reboot
fi
if [[ -e "$STEAMOS_STEAM_SHUTDOWN_SENTINEL" ]]; then
	rm -f "$STEAMOS_STEAM_SHUTDOWN_SENTINEL"
	poweroff
fi

# Wait for gamescope or the sleep to finish for timeout purposes
ret=0
wait -n $gamescope_pid $sleep_pid || ret=$?

# If we get a SIGTERM/etc while waiting this happens.  Proceed to kill -9 everything but complain
if [[ $ret = 127 ]]; then
	echo >&2 "gamescope-session: Interrupted while waiting on teardown, force-killing remaining tasks"
fi

# Kill all remaining jobs and warn if unexpected things are in there (should be just sleep_pid, unless gamescope failed
# to exit in time or we hit the interrupt case above)
for job in $(jobs -p); do
	# Warn about unexpected things
	if [[ $ret != 127 && $job = "$gamescope_pid" ]]; then
		echo >&2 "gamescope-session: gamescope timed out while exiting, killing"
	elif [[ $ret != 127 && $job != "$sleep_pid" ]]; then
		echo >&2 "gamescope-session: unexpected background pid $job at teardown: "
		# spew some debug about it
		ps -p "$job" >&2
	fi
	kill -9 "$job"
done
